
Lock-Door.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000288  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000288  000002fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00000a68  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000926  00000000  00000000  00000b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002f4  00000000  00000000  0000144e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000645  00000000  00000000  00001742  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  00001d88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a1  00000000  00000000  00001e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000165  00000000  00000000  0000200d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2b 01 	call	0x256	; 0x256 <main>
  8a:	0c 94 42 01 	jmp	0x284	; 0x284 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <vKeypadInit>:
void vKeypadInit(void)
   {
	//set input 0 
	// set output 0 
	//set rows is output.
	ROW0_DIR |= (1U<<ROW0);   
  92:	b8 9a       	sbi	0x17, 0	; 23
	ROW1_DIR |= (1U<<ROW1);
  94:	b9 9a       	sbi	0x17, 1	; 23
	ROW2_DIR |= (1U<<ROW2);
  96:	ba 9a       	sbi	0x17, 2	; 23
	ROW3_DIR |= (1U<<ROW3);  
  98:	bb 9a       	sbi	0x17, 3	; 23
	// set lines is inputs.
	LINE0_DIR &=~ (1U<<LINE0);
  9a:	bc 98       	cbi	0x17, 4	; 23
	LINE1_DIR &=~ (1U<<LINE1);
  9c:	bd 98       	cbi	0x17, 5	; 23
	LINE2_DIR &=~ (1U<<LINE2);
  9e:	be 98       	cbi	0x17, 6	; 23
	LINE3_DIR &=~ (1U<<LINE3);
  a0:	bf 98       	cbi	0x17, 7	; 23
	// LINES IS PULL-UP.
	LINE0_PULLUP |= (1U<<LINE0);
  a2:	b4 9a       	sbi	0x16, 4	; 22
	LINE1_PULLUP |= (1U<<LINE1);
  a4:	b5 9a       	sbi	0x16, 5	; 22
	LINE2_PULLUP |= (1U<<LINE2);
  a6:	b6 9a       	sbi	0x16, 6	; 22
	LINE3_PULLUP |= (1U<<LINE3);
  a8:	b7 9a       	sbi	0x16, 7	; 22
	//set rows state(1).
	ROW0_DATAOUT |= (NO_OUTPUT_STATE<<ROW0);
  aa:	c0 9a       	sbi	0x18, 0	; 24
	ROW1_DATAOUT |= (NO_OUTPUT_STATE<<ROW1);
  ac:	c1 9a       	sbi	0x18, 1	; 24
	ROW2_DATAOUT |= (NO_OUTPUT_STATE<<ROW2);
  ae:	c2 9a       	sbi	0x18, 2	; 24
	ROW3_DATAOUT |= (NO_OUTPUT_STATE<<ROW3);
  b0:	c3 9a       	sbi	0x18, 3	; 24
}
  b2:	08 95       	ret

000000b4 <ucKeypad_Scan>:

unsigned char ucKeypad_Scan(void){
  b4:	91 e0       	ldi	r25, 0x01	; 1
  b6:	01 c0       	rjmp	.+2      	; 0xba <ucKeypad_Scan+0x6>
  b8:	9f 5f       	subi	r25, 0xFF	; 255
	uint8_t line = NO_VALID_INPUT;
	//unsigned char result = NO_VALID_INPUT;  
	// loop rows 
	  for(row =0; row<4;row++){
		//set the numbered rows to the output states (1)
			ROW0_DATAOUT |= (NO_OUTPUT_STATE<<ROW0);
  ba:	c0 9a       	sbi	0x18, 0	; 24
			ROW1_DATAOUT |= (NO_OUTPUT_STATE<<ROW1);
  bc:	c1 9a       	sbi	0x18, 1	; 24
			ROW2_DATAOUT |= (NO_OUTPUT_STATE<<ROW2);
  be:	c2 9a       	sbi	0x18, 2	; 24
			ROW3_DATAOUT |= (NO_OUTPUT_STATE<<ROW3);
  c0:	c3 9a       	sbi	0x18, 3	; 24
	 //set the numbered rows to the output states (0)
	 switch(row){
  c2:	89 2f       	mov	r24, r25
  c4:	81 50       	subi	r24, 0x01	; 1
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	49 f0       	breq	.+18     	; 0xdc <ucKeypad_Scan+0x28>
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	28 f0       	brcs	.+10     	; 0xd8 <ucKeypad_Scan+0x24>
  ce:	82 30       	cpi	r24, 0x02	; 2
  d0:	39 f0       	breq	.+14     	; 0xe0 <ucKeypad_Scan+0x2c>
  d2:	83 30       	cpi	r24, 0x03	; 3
  d4:	69 f4       	brne	.+26     	; 0xf0 <ucKeypad_Scan+0x3c>
  d6:	06 c0       	rjmp	.+12     	; 0xe4 <ucKeypad_Scan+0x30>
	 case 0:ROW0_DATAOUT &=~(OUTPUT_STATE <<ROW0); break;
  d8:	c0 98       	cbi	0x18, 0	; 24
  da:	13 c0       	rjmp	.+38     	; 0x102 <ucKeypad_Scan+0x4e>
	 case 1:ROW1_DATAOUT &=~(OUTPUT_STATE <<ROW1); break;
  dc:	c1 98       	cbi	0x18, 1	; 24
  de:	11 c0       	rjmp	.+34     	; 0x102 <ucKeypad_Scan+0x4e>
	 case 2:ROW2_DATAOUT &=~(OUTPUT_STATE <<ROW2); break;
  e0:	c2 98       	cbi	0x18, 2	; 24
  e2:	0f c0       	rjmp	.+30     	; 0x102 <ucKeypad_Scan+0x4e>
	 case 3:ROW3_DATAOUT &=~(OUTPUT_STATE <<ROW3); break;
  e4:	c3 98       	cbi	0x18, 3	; 24
	 default: break;
	 }	 
	 //check the inputs
	 if ( LINE0_DATAIN&(1U<<LINE0) == INPUT_STATE) {line =0;}
  e6:	88 b3       	in	r24, 0x18	; 24
  else if( LINE1_DATAIN&(1U<<LINE1) == INPUT_STATE) {line =1;}
  e8:	88 b3       	in	r24, 0x18	; 24
  else if( LINE2_DATAIN&(1U<<LINE2) == INPUT_STATE) {line =2;}
  ea:	88 b3       	in	r24, 0x18	; 24
  else if( LINE3_DATAIN&(1U<<LINE3) == INPUT_STATE) {line =3;}
  ec:	88 b3       	in	r24, 0x18	; 24
  ee:	06 c0       	rjmp	.+12     	; 0xfc <ucKeypad_Scan+0x48>
	 case 2:ROW2_DATAOUT &=~(OUTPUT_STATE <<ROW2); break;
	 case 3:ROW3_DATAOUT &=~(OUTPUT_STATE <<ROW3); break;
	 default: break;
	 }	 
	 //check the inputs
	 if ( LINE0_DATAIN&(1U<<LINE0) == INPUT_STATE) {line =0;}
  f0:	88 b3       	in	r24, 0x18	; 24
  else if( LINE1_DATAIN&(1U<<LINE1) == INPUT_STATE) {line =1;}
  f2:	88 b3       	in	r24, 0x18	; 24
  else if( LINE2_DATAIN&(1U<<LINE2) == INPUT_STATE) {line =2;}
  f4:	88 b3       	in	r24, 0x18	; 24
  else if( LINE3_DATAIN&(1U<<LINE3) == INPUT_STATE) {line =3;}
  f6:	88 b3       	in	r24, 0x18	; 24
	
	uint8_t row  = 0;
	uint8_t line = NO_VALID_INPUT;
	//unsigned char result = NO_VALID_INPUT;  
	// loop rows 
	  for(row =0; row<4;row++){
  f8:	94 30       	cpi	r25, 0x04	; 4
  fa:	f0 f2       	brcs	.-68     	; 0xb8 <ucKeypad_Scan+0x4>
		// wait the until valid gone 
	while (INPUT_IS_STILL_VALID == INPUT_STATE);
	   // result 
	}	
	}
	return m;	
  fc:	80 e6       	ldi	r24, 0x60	; 96
  fe:	90 e0       	ldi	r25, 0x00	; 0
 }
 100:	08 95       	ret
	 case 2:ROW2_DATAOUT &=~(OUTPUT_STATE <<ROW2); break;
	 case 3:ROW3_DATAOUT &=~(OUTPUT_STATE <<ROW3); break;
	 default: break;
	 }	 
	 //check the inputs
	 if ( LINE0_DATAIN&(1U<<LINE0) == INPUT_STATE) {line =0;}
 102:	88 b3       	in	r24, 0x18	; 24
  else if( LINE1_DATAIN&(1U<<LINE1) == INPUT_STATE) {line =1;}
 104:	88 b3       	in	r24, 0x18	; 24
  else if( LINE2_DATAIN&(1U<<LINE2) == INPUT_STATE) {line =2;}
 106:	88 b3       	in	r24, 0x18	; 24
  else if( LINE3_DATAIN&(1U<<LINE3) == INPUT_STATE) {line =3;}
 108:	88 b3       	in	r24, 0x18	; 24
 10a:	d6 cf       	rjmp	.-84     	; 0xb8 <ucKeypad_Scan+0x4>

0000010c <LCD_Command>:
Send lower nibble of command.
Give High to Low pulse at Enable (E).
*/
void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0);/* Sending upper nibble */
 10c:	9b b3       	in	r25, 0x1b	; 27
 10e:	28 2f       	mov	r18, r24
 110:	20 7f       	andi	r18, 0xF0	; 240
 112:	9f 70       	andi	r25, 0x0F	; 15
 114:	92 2b       	or	r25, r18
 116:	9b bb       	out	0x1b, r25	; 27
	LCD_Port_Control &= ~ (1<<RS);		/* RS=0, command reg. */
 118:	c1 98       	cbi	0x18, 1	; 24
	LCD_Port_Control |= (1<<EN);		/* Enable pulse */
 11a:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	95 e3       	ldi	r25, 0x35	; 53
 11e:	9a 95       	dec	r25
 120:	f1 f7       	brne	.-4      	; 0x11e <LCD_Command+0x12>
 122:	00 00       	nop
	_delay_us(10);
	LCD_Port_Control &= ~ (1<<EN);
 124:	c3 98       	cbi	0x18, 3	; 24
 126:	ef e3       	ldi	r30, 0x3F	; 63
 128:	ff e1       	ldi	r31, 0x1F	; 31
 12a:	31 97       	sbiw	r30, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCD_Command+0x1e>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCD_Command+0x24>
 130:	00 00       	nop
	_delay_us(2000);
	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);/* Sending lower nibble */
 132:	9b b3       	in	r25, 0x1b	; 27
 134:	82 95       	swap	r24
 136:	80 7f       	andi	r24, 0xF0	; 240
 138:	9f 70       	andi	r25, 0x0F	; 15
 13a:	89 2b       	or	r24, r25
 13c:	8b bb       	out	0x1b, r24	; 27
	LCD_Port_Control |= (1<<EN);
 13e:	c3 9a       	sbi	0x18, 3	; 24
 140:	f5 e0       	ldi	r31, 0x05	; 5
 142:	fa 95       	dec	r31
 144:	f1 f7       	brne	.-4      	; 0x142 <LCD_Command+0x36>
 146:	00 00       	nop
	_delay_us(1);
	LCD_Port_Control &= ~ (1<<EN);
 148:	c3 98       	cbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	8f e3       	ldi	r24, 0x3F	; 63
 14c:	9f e1       	ldi	r25, 0x1F	; 31
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <LCD_Command+0x42>
 152:	00 c0       	rjmp	.+0      	; 0x154 <LCD_Command+0x48>
 154:	00 00       	nop
	_delay_ms(2);
}
 156:	08 95       	ret

00000158 <LCD_Init>:
Send any Display ON command (0x0E, 0x0C)
Send 0x06 command (increment cursor)
*/
void LCD_Init (void)  /* LCD Initialize function */
{
	LCD_Dir = 0xFF;		/* Make LCD port direction as o/p */
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	8a bb       	out	0x1a, r24	; 26
	LCD_Dir_Control=0x0F; /* Make LCD port direction as o/p */
 15c:	8f e0       	ldi	r24, 0x0F	; 15
 15e:	87 bb       	out	0x17, r24	; 23
	LCD_Port_Control &= ~(1<<2);
 160:	c2 98       	cbi	0x18, 2	; 24
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	99 ef       	ldi	r25, 0xF9	; 249
 166:	a0 e0       	ldi	r26, 0x00	; 0
 168:	81 50       	subi	r24, 0x01	; 1
 16a:	90 40       	sbci	r25, 0x00	; 0
 16c:	a0 40       	sbci	r26, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <LCD_Init+0x10>
 170:	00 c0       	rjmp	.+0      	; 0x172 <LCD_Init+0x1a>
 172:	00 00       	nop
	_delay_ms(20);		/* LCD Power ON delay always >15ms */
	
	LCD_Command(0x33);
 174:	83 e3       	ldi	r24, 0x33	; 51
 176:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_Command>
	LCD_Command(0x32);	/* Send for 4 bit initialization of LCD  */
 17a:	82 e3       	ldi	r24, 0x32	; 50
 17c:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_Command>
	LCD_Command(0x28);	/* 2 line, 5*7 matrix in 4-bit mode */
 180:	88 e2       	ldi	r24, 0x28	; 40
 182:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_Command>
	LCD_Command(0x0c);	/* Display on cursor off */
 186:	8c e0       	ldi	r24, 0x0C	; 12
 188:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_Command>
	LCD_Command(0x06);	/* Increment cursor (shift cursor to right) */
 18c:	86 e0       	ldi	r24, 0x06	; 6
 18e:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_Command>
	LCD_Command(0x01);	/* Clear display screen */
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_Command>
}
 198:	08 95       	ret

0000019a <LCD_Char>:
Send lower nibble of data.
Give High to Low pulse at Enable (E).
*/
void LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0);/* Sending upper nibble */
 19a:	9b b3       	in	r25, 0x1b	; 27
 19c:	28 2f       	mov	r18, r24
 19e:	20 7f       	andi	r18, 0xF0	; 240
 1a0:	9f 70       	andi	r25, 0x0F	; 15
 1a2:	92 2b       	or	r25, r18
 1a4:	9b bb       	out	0x1b, r25	; 27
	LCD_Port_Control |= (1<<RS);  /* RS=1, data reg. */
 1a6:	c1 9a       	sbi	0x18, 1	; 24
	LCD_Port_Control|= (1<<EN);
 1a8:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1aa:	95 e3       	ldi	r25, 0x35	; 53
 1ac:	9a 95       	dec	r25
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCD_Char+0x12>
 1b0:	00 00       	nop
	_delay_us(10);
	LCD_Port_Control &= ~ (1<<EN);
 1b2:	c3 98       	cbi	0x18, 3	; 24
 1b4:	ef e1       	ldi	r30, 0x1F	; 31
 1b6:	f3 e0       	ldi	r31, 0x03	; 3
 1b8:	31 97       	sbiw	r30, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCD_Char+0x1e>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <LCD_Char+0x24>
 1be:	00 00       	nop
	_delay_us(200);
	LCD_Port = (LCD_Port & 0x0F) | (data << 4);  /* Sending lower nibble */
 1c0:	9b b3       	in	r25, 0x1b	; 27
 1c2:	82 95       	swap	r24
 1c4:	80 7f       	andi	r24, 0xF0	; 240
 1c6:	9f 70       	andi	r25, 0x0F	; 15
 1c8:	89 2b       	or	r24, r25
 1ca:	8b bb       	out	0x1b, r24	; 27
	LCD_Port_Control |= (1<<EN);
 1cc:	c3 9a       	sbi	0x18, 3	; 24
 1ce:	f5 e3       	ldi	r31, 0x35	; 53
 1d0:	fa 95       	dec	r31
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <LCD_Char+0x36>
 1d4:	00 00       	nop
	_delay_us(10);
	LCD_Port_Control &= ~ (1<<EN);
 1d6:	c3 98       	cbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d8:	8f e5       	ldi	r24, 0x5F	; 95
 1da:	9d e6       	ldi	r25, 0x6D	; 109
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <LCD_Char+0x42>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <LCD_Char+0x48>
 1e2:	00 00       	nop
	_delay_ms(7);
}
 1e4:	08 95       	ret

000001e6 <LCD_String>:

/*

*/
void LCD_String (char *str)		/* Send string to LCD function */
{
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 1ec:	88 81       	ld	r24, Y
 1ee:	88 23       	and	r24, r24
 1f0:	31 f0       	breq	.+12     	; 0x1fe <LCD_String+0x18>
}

/*

*/
void LCD_String (char *str)		/* Send string to LCD function */
 1f2:	21 96       	adiw	r28, 0x01	; 1
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
	{
		LCD_Char (str[i]);
 1f4:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_Char>

*/
void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 1f8:	89 91       	ld	r24, Y+
 1fa:	88 23       	and	r24, r24
 1fc:	d9 f7       	brne	.-10     	; 0x1f4 <LCD_String+0xe>
	{
		LCD_Char (str[i]);
	}
}
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <LCD_String_xy>:
/*

*/
void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	ea 01       	movw	r28, r20
	if (row == 0 && pos<16)
 20a:	88 23       	and	r24, r24
 20c:	41 f4       	brne	.+16     	; 0x21e <LCD_String_xy+0x1a>
 20e:	60 31       	cpi	r22, 0x10	; 16
 210:	78 f4       	brcc	.+30     	; 0x230 <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
 212:	86 2f       	mov	r24, r22
 214:	8f 70       	andi	r24, 0x0F	; 15
 216:	80 68       	ori	r24, 0x80	; 128
 218:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_Command>
 21c:	09 c0       	rjmp	.+18     	; 0x230 <LCD_String_xy+0x2c>
	else if (row == 1 && pos<16)
 21e:	81 30       	cpi	r24, 0x01	; 1
 220:	39 f4       	brne	.+14     	; 0x230 <LCD_String_xy+0x2c>
 222:	60 31       	cpi	r22, 0x10	; 16
 224:	28 f4       	brcc	.+10     	; 0x230 <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
 226:	86 2f       	mov	r24, r22
 228:	8f 70       	andi	r24, 0x0F	; 15
 22a:	80 6c       	ori	r24, 0xC0	; 192
 22c:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
 230:	ce 01       	movw	r24, r28
 232:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_String>
}
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <LCD_Clear>:
/*

*/
void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_Command>
 242:	8f e3       	ldi	r24, 0x3F	; 63
 244:	9f e1       	ldi	r25, 0x1F	; 31
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <LCD_Clear+0xa>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <LCD_Clear+0x10>
 24c:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
 24e:	80 e8       	ldi	r24, 0x80	; 128
 250:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_Command>
}
 254:	08 95       	ret

00000256 <main>:
#include "keypad.h"
#include "LEDs.h"

int main(void)
{ 
	LED0_DIR |= (1U<<LED0);	  		 
 256:	d0 9a       	sbi	0x1a, 0	; 26
	 LCD_Init ();
 258:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_Init>
	 unsigned char m[]={'1','2','3'};
	  LCD_Command(0x0C);
 25c:	8c e0       	ldi	r24, 0x0C	; 12
 25e:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_Command>
	//cLCD_String("SHEHAB");	 /* Write string on 1st line of LCD*/
         /* Go to 2nd line*/
	//cLCD_String("HASSAN");	 /* Write string on 2nd line*/
	LCD_String_xy (0,5,"shehab"); // 0 = write in first line , 1 = write in second line .
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	65 e0       	ldi	r22, 0x05	; 5
 266:	41 e6       	ldi	r20, 0x61	; 97
 268:	50 e0       	ldi	r21, 0x00	; 0
 26a:	0e 94 02 01 	call	0x204	; 0x204 <LCD_String_xy>
    LCD_String_xy (1,3,"Kimo abo nika");
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	63 e0       	ldi	r22, 0x03	; 3
 272:	48 e6       	ldi	r20, 0x68	; 104
 274:	50 e0       	ldi	r21, 0x00	; 0
 276:	0e 94 02 01 	call	0x204	; 0x204 <LCD_String_xy>
    while(1)
    {
		vKeypadInit();
 27a:	0e 94 49 00 	call	0x92	; 0x92 <vKeypadInit>
		ucKeypad_Scan();
 27e:	0e 94 5a 00 	call	0xb4	; 0xb4 <ucKeypad_Scan>
 282:	fb cf       	rjmp	.-10     	; 0x27a <main+0x24>

00000284 <_exit>:
 284:	f8 94       	cli

00000286 <__stop_program>:
 286:	ff cf       	rjmp	.-2      	; 0x286 <__stop_program>
